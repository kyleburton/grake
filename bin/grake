#!/usr/bin/env bash
set -eu

if [ -n "${DEBUG:-}" ]; then
    set -x
fi

realpath() {
  [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

#PROJ_ROOT=$(dirname $(dirname $(readlink -e $0)))
PROJ_ROOT=$(dirname $(dirname $(realpath $0)))
GOPATH="$GOPATH:$PROJ_ROOT"


ensure_working_directory () {
    if [ ! -d .grake ]; then
        mkdir .grake
    fi
}

find_grakefile () {
    if [ -e grakefile ]; then
        echo "grakefile"
        return 0
    fi

    if [ -e Grakefile ]; then
        echo "Grakefile"
        return 0
    fi

    if [ -e GRakefile ]; then
        echo "GRakefile"
        return 0
    fi

    echo "Error: GRakefile not found!"
    return 1
}

make_grakefile () {
    IN_GRAKEFILE="$1"
    OUT_GRAKEFILE=".grake/main.go"

    # pull any imports out into .grake/.imports
    # pull any function definitions into .grake/.toplevel
    # any remaining lines become the body of make_all_tasks
    ruby $PROJ_ROOT/lib/process_grakefile.rb "$IN_GRAKEFILE"

    cat <<EOF > "$OUT_GRAKEFILE"
package main

import(
  "flag"
  "fmt"
  "strings"
  f "grake/fileutils"
  g "grake/tasks"
$(cat .grake/.imports)
)

var _ = f.Exists // ignore if unused
var _ = g.Desc   // ignore if unused
var _ = strings.Join

$(cat .grake/.toplevel)

func make_all_tasks () {
$(cat .grake/.tasks)
}

func main () {
  showTasks := flag.Bool("T", false, "Show Tasks")
  showHelp  := flag.Bool("help", false, "Show Help")
  flag.Parse()

  if *showHelp {
    fmt.Printf("Show Help here\n")
    return
  }

  make_all_tasks()

  taskName := g.DefaultTaskName
  if (len(flag.Args()) > 0) {
    taskName = flag.Args()[0]
  }

  taskName, args := g.ParseTaskString(taskName)

  if *showTasks {
    g.ShowTasks()
    return
  }

  g.InvokeTask(taskName, args)
}
EOF

go fmt $OUT_GRAKEFILE >/dev/null

cd .grake
go build main.go
cd ..

}

run_grake () {
    exec ./.grake/main $@
}

if ! find_grakefile > /dev/null; then
  if [ "${1:-}" = "init" ]; then
    echo -n "Creating Grakefile..."
    cat <<END > Grakefile
g.Desc("Example Task")
g.Task("hello", func (self *g.TaskInfo) {
  fmt.Printf("Implement your task: %s\n", self.Name)
})
END
    echo "done."
    if [ -n "${EDITOR:-}" ]; then
      echo ""
      echo "$EDITOR Grakefile"
      echo ""
    fi
    exit 0
  fi
  echo "No Grakefile found, if you'd like me to make one, run:"
  echo "  grake init"
  exit 1
fi

if [ -n "${DEBUG:-}" ]; then
    echo PROJ_ROOT=$PROJ_ROOT
    echo grakefile=$(find_grakefile)
    echo $GOPATH
fi

GRAKEFILE="$(find_grakefile)"
ensure_working_directory
# if the Grakefile is newer than the .grakefile/main.go, recreate the .grakefile/main.go
if [ "$GRAKEFILE" -nt ".grake/main" ]; then 
  make_grakefile $GRAKEFILE
fi
run_grake $@
